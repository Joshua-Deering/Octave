
export component NumInput {
    in-out property <float> value;
    
    in property <bool> is_int: true;
    in property <color> background;
    in property <color> text-color;

    in property <float> min;
    in property <float> max;

    width: r.width;
    height: r.height;

    callback accepted(val: float);
    
    changed value => {
        te.text = root.value;
    }

    r := Rectangle {
        background: root.background;
        border-radius: 4px;
        width: te.preferred-width + 8px;
        height: te.preferred-height + 2px;
        te := TextInput {
            x: 4px;
            y: 1px;
            text: {root.value};
            color: root.text-color;
            key-released(event) => {
                if (event.text == Key.Escape) {
                    self.clear-focus();
                    self.text = root.value;
                }
                if (event.text == Key.Return) {
                    self.clear-focus();
                }
                return accept;
            }
            accepted => {
                if (!self.text.is-float()) {
                    self.text = root.value;
                } else {
                    if (root.is_int) {
                        if (self.text.to-float().floor() > max.floor()) {
                            root.value = root.max;
                        } else if (self.text.to-float().floor() < min.floor()) {
                            root.value = root.min;
                        } else {
                            root.value = self.text.to-float().floor();
                        }
                    } else {
                        if (self.text.to-float() > max) {
                            root.value = root.max;
                        } else if (self.text.to-float() < min) {
                            root.value = root.min;
                        } else {
                            root.value = self.text.to-float();
                        }
                    }
                    root.accepted(root.value);
                }
            }
        }
    }
}
