import { Button } from "std-widgets.slint";
import { Palette } from "./colors.slint";
import { LogGraph } from "./log-graph.slint";
import { ComboBox } from "./combobox.slint";
import { LabelledInput } from "./labelled-input.slint";

export struct NodeData {
    f_type: string,
    gain: float,
    freq: float,
    q: float,
}

export struct FreqResponse {
    freq: float,
    gain: float,
}

export component ParametricEq {

    pure callback initialize_eq_nodes(int, int, int) -> [NodeData];
    pure callback set_eq([NodeData]);
    pure callback request_eq_response([NodeData], float, float, float, float, length, length) -> string;
    pure callback request_eq_fill_response([NodeData], float, float, float, float, length, length) -> string;

    width: 100%;
    height: 100%;

    out property <float> min_freq: 20;
    out property <float> max_freq: 20000;
    out property <float> min_gain: -15;
    out property <float> max_gain: 15;
    property <float> min_lvl: -50.0;
    property <float> max_lvl: 10.0;
    property <float> min_q: 0.1;
    property <float> max_q: 100.0;

    property <length> left_axis_margin: 0px;
    property <length> bottom_axis_margin: 0px;
    property <length> graph_margin: 5px;

    out property <length> draw_area_width: root.width - left_axis_margin - 2 * graph_margin;
    out property <length> graph_height: root.height * 0.8;
    out property <length> draw_area_height: graph_height - bottom_axis_margin - 2 * graph_margin;

    property <length> node_rad: 9px;

    in property <int> num_nodes: 5;
    out property <[NodeData]> eq_nodes: initialize_eq_nodes(self.num_nodes, min_freq, max_freq);

    property <bool> is_hovered;
    property <int> hovered_node;
    property <length> hovered_node_x;
    property <length> hovered_node_y;

    in-out property <string> eq_graph_cmds;
    in-out property <string> eq_graph_fill_cmds;
    property <bool> on_cooldown;
    property <bool> eq_changed;

    property <[float]> key_freqs: [20, 50, 100, 200, 500, 1000, 2000, 5000, 10000];
    property <[float]> minor_freqs: [30, 40, 60, 70, 80, 90, 300, 400, 600, 700, 800, 900, 3000, 4000, 6000, 7000, 8000, 9000, 15000];
    property <[float]> key_gains: [-10, -5, 0, 5, 10];
    property <[float]> key_lvls: [-40.0, -30.0, -20.0, -10.0, 0.0];

    function set_eq_and_draw() {
        root.set_eq(root.eq_nodes);
        root.eq_graph_cmds = request_eq_response(root.eq_nodes, root.min_freq, root.max_freq, root.min_gain, root.max_gain, root.draw_area_width, root.draw_area_height);
        root.eq_graph_fill_cmds = request_eq_fill_response(root.eq_nodes, root.min_freq, root.max_freq, root.min_gain, root.max_gain, root.draw_area_width, root.draw_area_height);
    }

    function into_index(node_type: string) -> int {
        if (node_type == "LPF") {return 0;}
        if (node_type == "HPF") {return 1;}
        if (node_type == "Low Shelf") {return 2;}
        if (node_type == "High Shelf") {return 3;}
        if (node_type == "Notch") {return 4;}
        if (node_type == "Peak") {return 5;}
        return 5;
    }

    changed num_nodes => {
        self.eq_nodes = initialize_eq_nodes(self.num_nodes, min_freq, max_freq);
        self.eq_graph_fill_cmds = request_eq_fill_response(root.eq_nodes, root.min_freq, root.max_freq, root.min_gain, root.max_gain, root.draw_area_width, root.draw_area_height);
    }
    changed draw_area_width => {
        self.eq_graph_cmds = request_eq_response(root.eq_nodes, root.min_freq, root.max_freq, root.min_gain, root.max_gain, root.draw_area_width, root.draw_area_height);
        self.eq_graph_fill_cmds = request_eq_fill_response(root.eq_nodes, root.min_freq, root.max_freq, root.min_gain, root.max_gain, root.draw_area_width, root.draw_area_height);
    }
    changed draw_area_height => {
        self.eq_graph_cmds = request_eq_response(root.eq_nodes, root.min_freq, root.max_freq, root.min_gain, root.max_gain, root.draw_area_width, root.draw_area_height);
        self.eq_graph_fill_cmds = request_eq_fill_response(root.eq_nodes, root.min_freq, root.max_freq, root.min_gain, root.max_gain, root.draw_area_width, root.draw_area_height);
    }
    VerticalLayout {
        drawing_area := Rectangle {
            height: 80%;
            background: Palette.primary;

            LogGraph {
                width: root.draw_area_width;
                height: root.draw_area_height;
                x: root.graph_margin;
                y: root.graph_margin;

                min_freq: root.min_freq;
                max_freq: root.max_freq;
                key_freqs: root.key_freqs;
                minor_freqs: root.minor_freqs;

                right_axis_key_points: root.key_gains;
                right_axis_min: root.min_gain;
                right_axis_max: root.max_gain;
                right_axis_is_centered: true;
                right_axis_label: "Gain (dB)";

                left_axis_key_points: root.key_lvls;
                left_axis_min: root.min_lvl;
                left_axis_max: root.max_lvl;
                left_axis_is_centered: false;
                left_axis_label: "Level (dBFS)";
                
                major_line_color: Palette.secondary.transparentize(30%);
                minor_line_color: Palette.secondary.transparentize(70%);
                background: Palette.primary;
                label_color: Palette.accent1;
                border_color: Palette.secondary;
            }

            Path {
                width: root.draw_area_width;
                height: root.draw_area_height;
                x: graph_margin;
                y: graph_margin;

                viewbox-x: 0;
                viewbox-y: 0;
                viewbox-width: root.draw_area_width / 1px;
                viewbox-height: root.draw_area_height / 1px;

                commands: root.eq_graph_fill_cmds;
                stroke: transparent;
                stroke-width: 3px;
                fill: Palette.accent2.transparentize(60%);
            }

            Path {
                width: root.draw_area_width;
                height: root.draw_area_height;
                x: graph_margin;
                y: graph_margin;

                viewbox-x: 0;
                viewbox-y: 0;
                viewbox-width: root.draw_area_width / 1px;
                viewbox-height: root.draw_area_height / 1px;

                stroke: Palette.accent3;
                stroke-width: 2.5px;
                commands: root.eq_graph_cmds;
            }

            Text {
                x: root.x + 5px;
                y: root.y + 5px;
                text: "Changed (release to set changes)";
                color: red;
                visible: root.eq_changed;
            }
            
            for node[i] in eq_nodes: Rectangle {
                property <bool> has_hover: is_inside(self.x + root.node_rad, self.y + root.node_rad, peq_ta.mouse-x, peq_ta.mouse-y, root.node_rad);

                Text {
                    text: i + 1;
                    horizontal-alignment: center;
                    vertical-alignment: center;
                    color: has_hover ? Palette.accent2 : Palette.accent1;
                }

                x: root.freq_to_x(node.freq) - root.node_rad;
                y: root.gain_to_y(node.gain) - root.node_rad;

                width: 2 * root.node_rad;
                height: 2 * root.node_rad;

                border-radius: root.node_rad;
                border-width: 2px;
                border-color: has_hover ? Palette.accent2 : Palette.accent1;

                background: has_hover ? Palette.accent2.transparentize(0.5) : transparent;

                changed has_hover => {
                    if (self.has_hover == true && (hovered_node == i || !is_hovered)) {
                        root.hovered_node = i;
                        root.hovered_node_x = self.x + root.node_rad;
                        root.hovered_node_y = self.y + root.node_rad;
                    }
                }
            }

            peq_ta := TouchArea {
                cooldown := Timer {
                    interval: 20ms;
                    running: false;
                    triggered => {
                        root.on_cooldown = false;
                        self.running = false;
                    }
                }
                pointer-event(event) => {
                    if (event.button != PointerEventButton.left) {return;}

                    if (event.kind == PointerEventKind.down) {
                        if (is_inside(hovered_node_x, hovered_node_y, self.mouse-x, self.mouse-y, root.node_rad)) {
                            is_hovered = true;
                        }
                    }

                    if (event.kind == PointerEventKind.up) {
                        set_eq(root.eq_nodes);
                        root.eq_changed = false;
                        is_hovered = false;
                    }
                }
                moved => {
                    if (root.is_hovered) {
                        root.eq_changed = true;
                        root.eq_nodes[hovered_node].freq = Math.max(root.min_freq, Math.min(root.max_freq, x_to_freq(self.mouse-x)));
                        if (root.eq_nodes[hovered_node].f_type == "HPF" ||
                            root.eq_nodes[hovered_node].f_type == "LPF" ||
                            root.eq_nodes[hovered_node].f_type == "Notch") {
                            root.eq_nodes[hovered_node].gain = 0;
                        } else {
                            root.eq_nodes[hovered_node].gain = Math.max(root.min_gain, Math.min(root.max_gain, y_to_gain(self.mouse-y)));
                        }

                        hovered_node_x = self.mouse-x;
                        hovered_node_y = self.mouse-y;

                        if (!root.on_cooldown) {
                            root.eq_graph_cmds = request_eq_response(root.eq_nodes, root.min_freq, root.max_freq, root.min_gain, root.max_gain, root.draw_area_width, root.draw_area_height);
                            root.eq_graph_fill_cmds = request_eq_fill_response(root.eq_nodes, root.min_freq, root.max_freq, root.min_gain, root.max_gain, root.draw_area_width, root.draw_area_height);

                            root.on_cooldown = true;
                            cooldown.running = true;
                        }
                    }
                }
            }
        }

        Rectangle {
            background: Palette.primary;
            HorizontalLayout {
                spacing: 8px;
                alignment: center;
                for node[i] in eq_nodes: Rectangle {
                    border-radius: 10px;
                    background: Palette.secondary;
                    width: root.width / 5 - 8px;
                    height: 20%;
                    Text {
                        text: i + 1;
                        x: (root.x / 5) * i + 5px;
                        y: parent.y + 5px;
                        color: Palette.accent1;
                    }

                    HorizontalLayout {
                        alignment: center;
                        width: 100%;
                        height: 100%;
                        VerticalLayout {
                            padding-top: 3px;
                            padding-bottom: 3px;
                            if (node.f_type == "Peak" || node.f_type == "Low Shelf" || node.f_type == "High Shelf") : LabelledInput {
                                property <float> g: Math.floor(node.gain * 100) / 100;
                                label: "Gain: ";
                                value: { g }
                                changed g => {
                                    self.value = g;
                                }
                                units: "dB";
                                is_int: false;
                                min: root.min_gain;
                                max: root.max_gain;
                                text_color: Palette.accent1;
                                input_background: Palette.secondary.darker(20%);
                                accepted(val) => {
                                    eq_nodes[i].gain = val;
                                    set_eq_and_draw();
                                }
                            }

                            LabelledInput {
                                property <float> f: Math.floor(node.freq * 100) / 100;
                                label: "Freq: ";
                                value: { f }
                                changed f => {
                                    self.value = f;
                                }
                                units: "Hz";
                                is_int: false;
                                min: root.min_freq;
                                max: root.max_freq;
                                text_color: Palette.accent1;
                                input_background: Palette.secondary.darker(20%);
                                accepted(val) => {
                                    eq_nodes[i].freq = val;
                                    set_eq_and_draw();
                                }
                            }

                            // Q, BW and S
                            LabelledInput {
                                property <float> q: Math.floor(node.q * 100) / 100;
                                label: (node.f_type == "LPF" || node.f_type == "HPF" || node.f_type == "Low Shelf" || node.f_type == "High Shelf") ? "Slope: " : 
                                        node.f_type == "Notch" ? "Bandwidth: " : "Q: ";
                                value: { q }
                                changed q => {
                                    self.value = q;
                                }
                                units: "";
                                is_int: false;
                                min: root.min_q;
                                max: root.max_q;
                                text_color: Palette.accent1;
                                input_background: Palette.secondary.darker(20%);
                                accepted(val) => {
                                    eq_nodes[i].q = val;
                                    set_eq_and_draw();
                                }
                            }

                            ComboBox {
                                width: self.min-width;
                                height: 25px;
                                x: parent.width / 2 - self.width / 2;
                                background: Palette.accent1.darker(30%);
                                text_color: Palette.textcol;
                                current_index: into_index(node.f_type);
                                options: ["LPF", "HPF", "Low Shelf", "High Shelf", "Notch", "Peak"];
                                selected(val) => {
                                    eq_nodes[i].f_type = val;
                                    if (val == "LPF" || val == "HPF" || val == "Notch") {
                                        eq_nodes[i].gain = 0;
                                    }
                                    set_eq_and_draw();
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    pure function is_inside(
        c_x: length, c_y: length, 
        m_x: length, m_y: length,
        r: length
    ) -> bool {
        (Math.pow((c_x - m_x) / 1px, 2) + Math.pow((c_y - m_y) / 1px, 2)) <= Math.pow(r / 1px, 2)
    }

    pure function freq_to_x(
        freq: float,
    ) -> length {
        root.x + root.left_axis_margin + root.graph_margin + ((log(freq, 10)-log(root.min_freq, 10))/(log(root.max_freq, 10)-log(root.min_freq, 10))) * root.draw_area_width;
    }

    pure function x_to_freq(
        x: length,
    ) -> float {
        Math.pow(10, log(root.min_freq, 10) + ((x - root.x - root.left_axis_margin - root.graph_margin) / root.draw_area_width) * (log(root.max_freq, 10) - log(root.min_freq, 10)))
    }

    pure function gain_to_y(
        gain: float,
    ) -> length {
        return (root.draw_area_height / 2) + graph_margin - gain / (root.max_gain - root.min_gain) * root.draw_area_height;
    }

    pure function y_to_gain(
        y: length,
    ) -> float {
        if (y > root.draw_area_height / 2) {
            return -((y - root.draw_area_height / 2 - root.graph_margin) / root.draw_area_height) * (root.max_gain - root.min_gain);
        } else if (y < root.draw_area_height / 2) {
            return root.max_gain - ((y - root.graph_margin) / root.draw_area_height) * (root.max_gain - root.min_gain);
        } else {
            return 0.0;
        }
    }

}
