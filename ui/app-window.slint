import {Button, ComboBox, Slider} from "std-widgets.slint";
import {PlayerProgressBar} from "./player-progress-bar.slint";

component MainUi {
    callback toggle_play(bool);
    callback file_select(string);
    callback slider_released(float);

    in property <int> cur_menu;
    
    in property <[string]> audio_files;
    in-out property <bool> is_playing: false;
    in-out property <string> selected_file: "";

    in-out property <float> slider_pos: 0;
    
    if (cur_menu == 0): VerticalLayout {
        width: 100%;
        height: 100%;

        Rectangle {
            background: #4287f5;
        }
        Rectangle {
            background: #4287f5;
            height: 100px;
            width: 100%;
            VerticalLayout {
                alignment: center;
                Text {
                    text: "Select a file:";
                }
                ComboBox {
                    width: 200px;
                    x: 0;
                    model: root.audio_files;
                    current-index: -1;
                    selected => {
                        root.selected_file = self.current-value;
                        root.is_playing = false;
                        root.file_select(self.current-value);
                    }
                }
            }
            VerticalLayout {
                alignment: end;
                padding-bottom: 5px;
                spacing: 5px;
                Button {
                    width: 80px;
                    height: 40px;
                    x: (root.width / 2) - 40px;
                    text: root.is_playing ? "stop" : "start";
                    clicked => {
                        root.is_playing = !root.is_playing;
                        toggle_play(root.is_playing);
                    }
                }
                Rectangle {
                    progress-bar := PlayerProgressBar {
                        enabled: root.is_playing;
                        width: 400px;
                        value: root.slider_pos;
                        released(pos) => {
                            root.slider_released(self.value)
                        }
                    }
                }
            }
        }
        waveform := Image {
            height: 100px;
            width: 100%;
        }
    }

    if (cur_menu == 1): VerticalLayout {
        width: 100%;
        height: 100%;
        Rectangle {
            background: green;
        }
    }

    if (cur_menu == 2): VerticalLayout {
        width: 100%;
        height: 100%;
        Rectangle {
            background: blue;
        }
    }
}

component MenuButton {
    in property <color> bg;
    in property <string> text;
    in property <length> font-size;

    callback btn_pressed();

    min-width: 150px;
    min-height: 35px;

    Rectangle {
        background: ta.pressed ? root.bg.darker(50%) : ta.has-hover ? root.bg.darker(-10%) : root.bg;
        border-color: self.background.darker(40%);
        ta := TouchArea {
            clicked => { root.btn_pressed(); }
        }
        txt := Text {
            wrap: no-wrap;
            text: root.text;
            font-size: root.font-size;
        }
    }
}

export component MainWindow inherits Window {
    width: 800px;
    height: 450px;
    property <int> current-menu;

    in property <[string]> audio_files <=> main_ui.audio_files;
    in-out property <bool> is_playing <=> main_ui.is_playing;
    in-out property <string> selected_file <=> main_ui.selected_file;
    callback toggle_play <=> main_ui.toggle_play;
    callback file_select <=> main_ui.file_select;

    in-out property slider_pos <=> main_ui.slider_pos;
    callback slider_released <=> main_ui.slider_released;

    callback init_menu(menu: int);
    callback close_menu(menu: int);

    init => {
        init_menu(0);
    }

    HorizontalLayout {
        Rectangle {
            background: #4287f5;
            VerticalLayout {
                alignment: center;
                spacing: 1px;
                Rectangle {
                    MenuButton {
                        text: "Play Audio";
                        font-size: 15px;
                        bg: #347bed;
                        btn_pressed() => {
                            if (current-menu != 0) {
                                close_menu(main_ui.cur_menu);
                                main_ui.cur_menu = 0;
                                init_menu(0);
                                current-menu = 0;
                            }
                        }
                    }
                }
                Rectangle {
                    MenuButton {
                        text: "Visualizers";
                        font-size: 15px;
                        bg: #347bed;
                        btn_pressed() => {
                            if (current-menu != 1) {
                                close_menu(main_ui.cur_menu);
                                main_ui.cur_menu = 1;
                                init_menu(1);
                                current-menu = 1;
                            }
                        }
                    }
                }
                Rectangle {
                    MenuButton {
                        text: "Real-Time Analyzer";
                        font-size: 15px;
                        bg: #347bed;
                        btn_pressed() => {
                            if (current-menu != 2) {
                                close_menu(main_ui.cur_menu);
                                main_ui.cur_menu = 2;
                                init_menu(2);
                                current-menu = 2;
                            }
                        }
                    }
                }
            }
        }
        
        main_ui := MainUi {
            cur_menu: 0;
        }
    }
}
