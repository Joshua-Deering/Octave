import {PlayerProgressBar} from "./player-progress-bar.slint";
import {ParametricEq, NodeData} from "./parametric-eq.slint";
import { Palette } from "./colors.slint";
import { Button } from "./button.slint";
import { ComboBox } from "./combobox.slint";

component MainUi {
    callback init_menu(int);
    callback toggle_play(bool);
    callback file_select(string);
    callback slider_released(float);
    callback render_waveform(string, length, length) -> image;
    pure callback init_eq_nodes(int) -> [NodeData];
    pure callback set_eq([NodeData]);
    pure callback request_eq_response([NodeData], float, float, float, float, length, length) -> string;

    in property <int> cur_menu;
    
    in property <[string]> audio_files;
    in-out property <bool> is_playing: false;
    in-out property <string> selected_file: "";
    in property <float> file_duration;

    in-out property <float> slider_pos: 0;
    out property <bool> slider_pressed;

    property <length> imgx: root.width;
    property <length> imgy: 100px;
    property <image> waveform_img;

    pure function format_time(seconds: float) -> string {
        return floor(seconds / 60) + ":" + (floor(Math.mod(seconds, 60)) < 10 ? "0" : "") + floor(Math.mod(seconds, 60));
    }
    
    if (cur_menu == 0): VerticalLayout {
        init => {
            init_menu(0);
            param_eq.eq_graph_cmds = request_eq_response(param_eq.eq_nodes, param_eq.min_freq, param_eq.max_freq, param_eq.min_gain, param_eq.max_gain, param_eq.draw_area_width, param_eq.draw_area_height);
        }
        width: 100%;
        height: 100%;

        Rectangle {
            param_eq := ParametricEq {
                initialize_eq_nodes(n) => {
                    root.init_eq_nodes(n)
                }
                request_eq_response(n, lf, hf, min_gain, max_gain, x, y) => {
                    root.request_eq_response(n, lf, hf, min_gain, max_gain, x, y)
                }
                set_eq(nodes) => {
                    root.set_eq(nodes);
                }
            }
        }
        Rectangle {
            background: Palette.primary;
            height: 75px;
            width: 100%;

            VerticalLayout {
                alignment: start;
                Text {
                    text: "Select a file:";
                    color: Palette.textcol;
                }
                ComboBox {
                    width: 200px;
                    x: 0;
                    options: root.audio_files;
                    current-index: -1;
                    background: Palette.secondary;
                    text_color: Palette.textcol;
                    selected => {
                        root.selected_file = self.current_value;
                        root.is_playing = false;
                        root.file_select(self.current_value);
                        root.waveform_img = root.render_waveform(self.current_value, root.imgx, root.imgy);
                    }
                }
            }
            VerticalLayout {
                alignment: end;
                padding-bottom: 5px;
                spacing: 5px;
                Button {
                    width: 80px;
                    height: 40px;
                    x: (root.width / 2) - 40px;
                    text: root.is_playing ? "stop" : "start";
                    background: Palette.primary.darker(-20%);
                    text_color: Palette.textcol;
                    clicked => {
                        root.is_playing = !root.is_playing;
                        toggle_play(root.is_playing);
                    }
                }
                Rectangle {
                    progress_bar := PlayerProgressBar {
                        enabled: root.is_playing;
                        width: 400px;
                        value: root.slider_pos;
                        left_label: format_time(self.value / 100 * file_duration);
                        right_label: format_time(file_duration);
                        label_color: Palette.textcol;
                        handle_color: Palette.accent2;
                        handle-pressed-changed(state) => {
                            root.slider_pressed = state;
                        }
                        changed(value) => {
                            root.slider_pos = value;
                        }
                        released(pos) => {
                            root.slider_released(self.value)
                        }
                    }
                }
            }
        }
        Rectangle {
            height: 80px;
            width: 100%;
            background: Palette.primary;
            Image {
                height: 100px;
                width: 100%;
                source: waveform_img;
                image-rendering: pixelated;
            }
            Rectangle {
                background: white;
                visible: root.is_playing;
                width: 1px;
                height: 100px;
                x: root.slider_pos / 100 * root.width;
            }
        }
    }

    if (cur_menu == 1): VerticalLayout {
        width: 100%;
        height: 100%;
        Rectangle {
            background: green;
        }
    }

    if (cur_menu == 2): VerticalLayout {
        width: 100%;
        height: 100%;
        Rectangle {
            background: blue;
        }
    }
}

component MenuButton {
    in property <color> bg;
    in property <string> text;
    in property <length> font-size;

    callback btn_pressed();

    min-width: 150px;
    min-height: 35px;

    Rectangle {
        background: ta.pressed ? root.bg.darker(50%) : ta.has-hover ? root.bg.darker(-10%) : root.bg;
        border-color: self.background.darker(40%);
        ta := TouchArea {
            clicked => { root.btn_pressed(); }
        }
        txt := Text {
            wrap: no-wrap;
            text: root.text;
            color: Palette.textcol;
            font-size: root.font-size;
        }
    }
}

export component MainWindow inherits Window {
    min-width: 800px;
    min-height: 450px;
    preferred-width: 1200px;
    preferred-height: 675px;
    property <int> current-menu: -1;

    in property <[string]> audio_files <=> main_ui.audio_files;
    in property <float> file_duration <=> main_ui.file_duration;
    in-out property <bool> is_playing <=> main_ui.is_playing;
    in-out property <string> selected_file <=> main_ui.selected_file;

    callback init_menu <=> main_ui.init_menu;
    callback toggle_play <=> main_ui.toggle_play;
    callback file_select <=> main_ui.file_select;
    callback render_waveform <=> main_ui.render_waveform;
    callback slider_released <=> main_ui.slider_released;
    pure callback init_eq_nodes <=> main_ui.init_eq_nodes;
    pure callback set_eq <=> main_ui.set_eq;
    pure callback request_eq_response <=> main_ui.request_eq_response;

    in-out property slider_pos <=> main_ui.slider_pos;
    out property <bool> slider_pressed <=> main_ui.slider_pressed;

    callback close_menu(menu: int);

    HorizontalLayout {
        Rectangle {
            background: Palette.primary;
            VerticalLayout {
                alignment: center;
                spacing: 1px;
                Rectangle {
                    MenuButton {
                        text: "Play Audio";
                        font-size: 15px;
                        bg: Palette.primary.darker(-20%);
                        btn_pressed() => {
                            if (current-menu != 0) {
                                close_menu(main_ui.cur_menu);
                                main_ui.cur_menu = 0;
                                init_menu(0);
                                current-menu = 0;
                            }
                        }
                    }
                }
                Rectangle {
                    MenuButton {
                        text: "Visualizers";
                        font-size: 15px;
                        bg: Palette.primary.darker(-20%);
                        btn_pressed() => {
                            if (current-menu != 1) {
                                close_menu(main_ui.cur_menu);
                                main_ui.cur_menu = 1;
                                init_menu(1);
                                current-menu = 1;
                            }
                        }
                    }
                }
                Rectangle {
                    MenuButton {
                        text: "Real-Time Analyzer";
                        font-size: 15px;
                        bg: Palette.primary.darker(-20%);
                        btn_pressed() => {
                            if (current-menu != 2) {
                                close_menu(main_ui.cur_menu);
                                main_ui.cur_menu = 2;
                                init_menu(2);
                                current-menu = 2;
                            }
                        }
                    }
                }
            }
        }
        
        main_ui := MainUi {
            cur_menu: 0;
        }
    }
}
