
export component PlayerProgressBar {
    in property enabled <=> touch-area.enabled;
    in property <float> minimum: 0;
    in property <float> maximum: 100;
    in-out property <float> value: minimum;

    in property <color> handle-color: blue;
    in property <color> slider-color: darkgray;

    min-width: 100px;
    min-height: 12px;

    property <length> handle-x: minimum * 1px;
    property <length> handle-y: root.y;
    property <length> handle-width: 4px;
    property <length> handle-height: root.height;
    
    out property <bool> handle-has-hover: touch-area.mouse-x >= root.handle-x && touch-area.mouse-x <= root.handle-x + root.handle-width &&
        touch-area.mouse-y >= root.handle-y && touch-area.mouse-y <= root.handle-y + root.handle-height;
    out property <bool> handle-pressed;

    callback changed(value: float);
    callback released(value: float);

    touch-area := TouchArea {
        property <float> pressed-value;            
        
        width: 100%;
        height: 100%;

        pointer-event(event) => {
            if (event.button != PointerEventButton.left) {
                return;
            }

            if (event.kind == PointerEventKind.up) {
                if (root.handle-pressed) {
                    root.released(root.value);
                }
                root.handle-pressed = false;
                return;
            }

            if (!root.handle-has-hover) {
                root.set-value(root.size-to-value(touch-area.mouse-x, root.width));
            }

            self.pressed-value = value;
            root.handle-pressed = true;
        }

        moved => {
            if (!self.enabled) {
                return;
            }

            root.set-value(self.pressed-value + root.size-to-value(touch-area.mouse-x - touch-area.pressed-x, root.width));
        }
    }

    Rectangle {
        width: 100%;
        height: root.height/2;
        background: slider-color;
        border-radius: 3px;
    }

    handle := Rectangle {
        width: handle-width;
        height: handle-height;
        x: root.value / (root.maximum - root.minimum) * root.width;

        border-radius: 2px;
        background: handle-pressed ? handle-color.darker(60%) : handle-has-hover ? handle-color.darker(20%) : handle-color.darker(40%);
    }
    


    pure function size-to-value(size: length, range: length) -> float {
        size * (root.maximum - root.minimum) / range;
    }

    function set-value(value: float) {
        if (root.value == value) {
            return;
        }

        root.value = max(root.minimum, min(root.maximum, value));
        root.changed(root.value);
    }
}
