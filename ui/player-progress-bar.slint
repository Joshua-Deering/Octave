export component PlayerProgressBar {
    in property enabled <=> touch_area.enabled;
    in property <float> minimum: 0;
    in property <float> maximum: 100;
    in_out property <float> value: minimum;

    in property <color> label_color: white;
    in property <string> left_label;
    in property <string> right_label;

    in property <color> handle_color: blue;
    in property <color> slider_color: darkgray;

    min_width: 100px;
    min_height: 12px;

    property <length> handle_x: minimum * 1px;
    property <length> handle_y: root.y;
    property <length> handle_width: 4px;
    property <length> handle_height: root.height;

    property <length> slider_size: root.width * 0.8;
    property <length> slider_offset: root.width / 10;
    
    out property <bool> handle_has_hover: touch_area.mouse_x >= root.handle_x && touch_area.mouse_x <= root.handle_x + root.handle_width &&
        touch_area.mouse_y >= root.handle_y && touch_area.mouse_y <= root.handle_y + root.handle_height;
    out property <bool> handle_pressed;

    callback handle_pressed_changed(state: bool);

    callback changed(value: float);
    callback released(value: float);

    touch_area := TouchArea {
        property <float> pressed_value;            
        
        width: 100%;
        height: 100%;

        pointer_event(event) => {
            if (event.button != PointerEventButton.left) {
                return;
            }

            if (event.kind == PointerEventKind.up) {
                if (root.handle_pressed) {
                    root.released(root.value);
                }
                root.handle_pressed = false;
                handle_pressed_changed(false);
                return;
            }

            if (!root.handle_has_hover) {
                root.set_value(root.size_to_value(touch_area.mouse_x, slider_size));
            }

            self.pressed_value = value;
            root.handle_pressed = true;
            handle_pressed_changed(true);
        }

        moved => {
            if (!self.enabled) {
                return;
            }

            root.set_value(self.pressed_value + root.size_to_value(touch_area.mouse_x - touch_area.pressed_x + slider_offset, slider_size));
        }
    }

    HorizontalLayout {
        width: 100%;
        height: 100%;
        alignment: center;
        spacing: 3px;
        Text {
            text: left_label;
            horizontal_alignment: right;
            width: root.width * 0.10;
            color: root.label_color;
        }
        Rectangle {
            horizontal_stretch: 1;
            height: 6px;
            min_width: root.width * 0.8;
            y: root.height / 2 - 3px;
            background: slider_color;
            border_radius: 3px;
        }
        Text {
            text: right_label;
            horizontal_alignment: left;
            width: root.width * 0.10;
            color: root.label_color;
        }
    }

    handle := Rectangle {
        width: handle_width;
        height: handle_height;
        x: root.value / (root.maximum - root.minimum) * slider_size + slider_offset;

        border_radius: 2px;
        background: handle_pressed ? handle_color.darker(60%) : handle_has_hover ? handle_color.darker(20%) : handle_color.darker(40%);
    }
    


    pure function size_to_value(size: length, range: length) -> float {
        (size - slider_offset) * (root.maximum - root.minimum) / range;
    }

    function set_value(value: float) {
        if (root.value == value) {
            return;
        }

        root.changed(max(root.minimum, min(root.maximum, value)));
    }
}
